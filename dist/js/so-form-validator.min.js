function soFormValidator(e){var r=sofova.domHelper.getElementFromVarious(e),t=new sofova.formConfigurator,n={};return n.validate=sofova.validator(r,t),n.$$parent=r,n.config=t,sofova.forms.push(n),n}!function(){function e(e,t){var o=e[t];e[t]=function(e){var t,i=!1,a=!1;if(e.match(n)){e=e.replace(n,""),this.parentNode||(r.appendChild(this),a=!0);var l=this.parentNode;return this.id||(this.id="rootedQuerySelector_id_"+(new Date).getTime(),i=!0),t=o.call(l,"#"+this.id+" "+e),i&&(this.id=""),a&&r.removeChild(this),t}return o.call(this,e)}}if(!HTMLElement.prototype.querySelectorAll)throw new Error("rootedQuerySelectorAll: This polyfill can only be used with browsers that support querySelectorAll");var r=document.createElement("div");try{r.querySelectorAll(":scope *")}catch(t){var n=/^\s*:scope/gi;e(HTMLElement.prototype,"querySelector"),e(HTMLElement.prototype,"querySelectorAll")}}(),function(e){"use strict";var r=e.prototype,t=r.parseFromString;try{if((new e).parseFromString("","text/html"))return}catch(n){}r.parseFromString=function(e,r){if(/^\s*text\/html\s*(?:;|$)/i.test(r)){var n=document.implementation.createHTMLDocument("");return e.toLowerCase().indexOf("<!doctype")>-1?n.documentElement.innerHTML=e:n.body.innerHTML=e,n}return t.apply(this,arguments)}}(DOMParser);var sofova={forms:[]};sofova.validators=function(e){function r(e,t,n){var o=t[e[0]];if("undefined"!=typeof n)var i=n[e[0]];return 1===e.length?i||o:"string"!=typeof o?r(e.slice(1),o,i):o}function t(t,n){if("undefined"!=typeof t){var o=t.split("."),i=sofova.validators.$$messages,a=e.$$customMessages,l=r(o,i,a),s=l.replace(/\$(.*?)\$/g,function(e){return n[e.slice(1,e.length-1)]});return[s,t]}}function n(e,r){if(isNaN(e))return NaN;var t="undefined"==typeof r.min||e>=r.min,n="undefined"==typeof r.max||e<=r.max;return t?n?0:1:-1}function o(e,r,t){if("undefined"!=typeof i[r]){var n=i[r](e,t);return"undefined"==typeof n?!0:{text:n[0],code:n[1]}}return new Error("Validator does not exist")}var i={required:function(e,r){return e===!0&&r.length<=0?t("required",e):void 0},length:function(e,r){var o,i=n(r.length,e);return-1===i&&(o="length.low"),1===i&&(o="length.high"),t(o,e)},value:function(e,r){r=parseFloat(r);var o,i=n(r,e);return-1===i&&(o="value.low"),1===i&&(o="value.high"),isNaN(i)&&(o="value.nan"),t(o,e)}};return{run:o}},sofova.validators.$$messages={length:{low:"Minimum length is $min$",high:"Maximum length is $max$"},value:{low:"Minimum value is $min$",high:"Maximum value is $max$",nan:"Value must be a number between $min$ and $max$"},required:"Value is required"},sofova.domHelper=function(){function e(e){return"object"==typeof e||Array.isArray(e)?e:"string"==typeof e?document.querySelectorAll(e):null}return{getElementFromVarious:e}}(),sofova.formConfigurator=function(){function e(e){for(var r in e)this.$$templateConfig[r]=e[r]}function r(e){this.$$customMessages=e}function t(e,r){return"undefined"==typeof this.$$rules[e]&&(this.$$rules[e]={}),this.$$rules[e].config=r,this}function n(e){for(var r=Object.keys(this.$$rules),t=0;t<r.length;t++)if("$$"!==r[t].slice(0,2)){var n=this.$$rules[r[t]];e(n,r[t])}}var o={type:"default",template:'<div class="so-form-errors">$element$ $errors$</div>',errorTemplate:'<div class="so-form-error">$message$</div>'};return{$$rules:{},$$templateConfig:o,$$iterateRules:n,template:e,errorMessages:r,rule:t}},sofova.validator=function(e,r){function t(e,r){for(var t=[],n=Object.keys(e),o=0;o<n.length;o++){var i=l.run(e[n[o]],n[o],r);i!==!0&&t.push({name:n[o],message:i})}return t}function n(e,n){for(var o=[],i=0;i<n.length;i++){var a=t(e.config,n[i].value);a.length>0?(o[i]=a,sofova.errorRenderer.displayErrors(n[i],e,a,r.$$templateConfig)):sofova.errorRenderer.clearErrors(r.$$templateConfig,n[i])}return o}function o(e){}function i(){l=sofova.validators(r);for(var t=0;t<e.length;t++)var n=e[t],o=a(n);return o}function a(e){var t={};return r.$$iterateRules(function(r,o){var i=e.querySelectorAll(":scope "+o),a=n(r,i);a.length>0&&(t[o]=a)}),t}var l={};return{all:i,form:o}},sofova.errorRenderer=function(){function e(e,r){var t;return t=r.reduce(function(r,t){var n=e.errorTemplate.replace("$message$",t.message.text).replace("$code$",t.message.code);return r+n},"")}function r(e){if("undefined"!=typeof e)for(var r=0;r<e.length;r++)e[r].remove()}function t(e,r){var r=e.details.parent.insertBefore(r,e.details.parent.children[e.details.index]),t=r.style.display;return r.style.display="none",r.style.display=t,r}function n(e,r){for(var n=[];"undefined"!=typeof e[e.length-1];){var o=t(r,e[e.length-1]);n.push(o)}r.elements=n}function o(t,o,i){r(t.elements);var a=t.template;a=a.replace("$element$","<element-placeholder></element-placeholder>").replace("$errors$",e(t,i));var l=new DOMParser,s=l.parseFromString(a,"text/html").firstChild.childNodes[1],u=s.children,f=s.querySelector("element-placeholder");f.parentElement.insertBefore(o,f),n(u,t),f.remove()}function i(e,n){"undefined"!=typeof e.details&&(r(e.elements),n.remove(),t(e,n))}function a(e,r,t,n){"undefined"==typeof n.details&&(n.details={parent:e.parentElement,index:Array.prototype.indexOf.call(e.parentElement,e)}),o(n,e,t)}return{displayErrors:a,clearErrors:i}}();var form=soFormValidator(".test-form");form.config.rule("input[name=test-input]",{value:{max:10,min:5},length:{min:1},required:!0}),form.config.errorMessages({value:{low:"Low low low",high:"High high high"},required:"Ooooooops"}),form.config.template({template:"<div class='so-form-errors'>$element$ $errors$</div>",errorTemplate:"<div class='so-form-error' data-code='$code$'>$message$</div>"});var formB=soFormValidator(".test-form-b");formB.config.rule("input[name=test-input]",{value:{max:10},length:{min:1},required:!0}),document.querySelector("input[type=submit]").addEventListener("mouseup",function(){form.validate.all()}),console.log(form),console.log();
//# sourceMappingURL=data:application/json;base64,
